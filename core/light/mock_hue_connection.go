// Code generated by mockery v1.0.0. DO NOT EDIT.

// NOTE: run 'make update-mocks' to regenerate

package light

import hue "github.com/heatxsink/go-hue/hue"
import lights "github.com/heatxsink/go-hue/lights"
import mock "github.com/stretchr/testify/mock"

// MockHueConnection is an autogenerated mock type for the HueConnection type
type MockHueConnection struct {
	mock.Mock
}

// GetAllLights provides a mock function with given fields:
func (_m *MockHueConnection) GetAllLights() ([]lights.Light, error) {
	ret := _m.Called()

	var r0 []lights.Light
	if rf, ok := ret.Get(0).(func() []lights.Light); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lights.Light)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLightState provides a mock function with given fields: lightID, state
func (_m *MockHueConnection) SetLightState(lightID int, state lights.State) ([]hue.ApiResponse, error) {
	ret := _m.Called(lightID, state)

	var r0 []hue.ApiResponse
	if rf, ok := ret.Get(0).(func(int, lights.State) []hue.ApiResponse); ok {
		r0 = rf(lightID, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hue.ApiResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, lights.State) error); ok {
		r1 = rf(lightID, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
