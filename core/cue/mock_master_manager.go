// Code generated by mockery v1.0.0. DO NOT EDIT.

// NOTE: run 'make update-mocks' to regenerate

package cue

import context "context"
import light "github.com/nickysemenza/hyperion/core/light"
import mock "github.com/stretchr/testify/mock"
import sync "sync"

// MockMasterManager is an autogenerated mock type for the MasterManager type
type MockMasterManager struct {
	mock.Mock
}

// AddIDsRecursively provides a mock function with given fields: c
func (_m *MockMasterManager) AddIDsRecursively(c *Cue) {
	_m.Called(c)
}

// EnQueueCue provides a mock function with given fields: c, cs
func (_m *MockMasterManager) EnQueueCue(c Cue, cs *Stack) *Cue {
	ret := _m.Called(c, cs)

	var r0 *Cue
	if rf, ok := ret.Get(0).(func(Cue, *Stack) *Cue); ok {
		r0 = rf(c, cs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Cue)
		}
	}

	return r0
}

// GetDefaultCueStack provides a mock function with given fields:
func (_m *MockMasterManager) GetDefaultCueStack() *Stack {
	ret := _m.Called()

	var r0 *Stack
	if rf, ok := ret.Get(0).(func() *Stack); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Stack)
		}
	}

	return r0
}

// GetLightManager provides a mock function with given fields:
func (_m *MockMasterManager) GetLightManager() light.Manager {
	ret := _m.Called()

	var r0 light.Manager
	if rf, ok := ret.Get(0).(func() light.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(light.Manager)
		}
	}

	return r0
}

// ProcessCue provides a mock function with given fields: ctx, c, wg
func (_m *MockMasterManager) ProcessCue(ctx context.Context, c *Cue, wg *sync.WaitGroup) {
	_m.Called(ctx, c, wg)
}

// ProcessForever provides a mock function with given fields: ctx, wg
func (_m *MockMasterManager) ProcessForever(ctx context.Context, wg *sync.WaitGroup) {
	_m.Called(ctx, wg)
}

// ProcessFrame provides a mock function with given fields: ctx, cf, wg
func (_m *MockMasterManager) ProcessFrame(ctx context.Context, cf *Frame, wg *sync.WaitGroup) {
	_m.Called(ctx, cf, wg)
}

// ProcessFrameAction provides a mock function with given fields: ctx, cfa, wg
func (_m *MockMasterManager) ProcessFrameAction(ctx context.Context, cfa *FrameAction, wg *sync.WaitGroup) {
	_m.Called(ctx, cfa, wg)
}

// ProcessStack provides a mock function with given fields: ctx, cs, wg
func (_m *MockMasterManager) ProcessStack(ctx context.Context, cs *Stack, wg *sync.WaitGroup) {
	_m.Called(ctx, cs, wg)
}
