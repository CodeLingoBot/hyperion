// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	proto/api.proto

It has these top-level messages:
	Ping
	MarshalledJSON
	Lights
	Light
	RGB
	ConnectionSettings
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ping) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MarshalledJSON struct {
	Kind string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MarshalledJSON) Reset()                    { *m = MarshalledJSON{} }
func (m *MarshalledJSON) String() string            { return proto.CompactTextString(m) }
func (*MarshalledJSON) ProtoMessage()               {}
func (*MarshalledJSON) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MarshalledJSON) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *MarshalledJSON) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Lights struct {
	Lights []*Light `protobuf:"bytes,1,rep,name=lights" json:"lights,omitempty"`
}

func (m *Lights) Reset()                    { *m = Lights{} }
func (m *Lights) String() string            { return proto.CompactTextString(m) }
func (*Lights) ProtoMessage()               {}
func (*Lights) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Lights) GetLights() []*Light {
	if m != nil {
		return m.Lights
	}
	return nil
}

type Light struct {
	Type         string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CurrentColor *RGB   `protobuf:"bytes,3,opt,name=currentColor" json:"currentColor,omitempty"`
}

func (m *Light) Reset()                    { *m = Light{} }
func (m *Light) String() string            { return proto.CompactTextString(m) }
func (*Light) ProtoMessage()               {}
func (*Light) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Light) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Light) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Light) GetCurrentColor() *RGB {
	if m != nil {
		return m.CurrentColor
	}
	return nil
}

type RGB struct {
	R int32 `protobuf:"varint,1,opt,name=R" json:"R,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=G" json:"G,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=B" json:"B,omitempty"`
}

func (m *RGB) Reset()                    { *m = RGB{} }
func (m *RGB) String() string            { return proto.CompactTextString(m) }
func (*RGB) ProtoMessage()               {}
func (*RGB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RGB) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *RGB) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *RGB) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type ConnectionSettings struct {
	Tick string `protobuf:"bytes,1,opt,name=tick" json:"tick,omitempty"`
}

func (m *ConnectionSettings) Reset()                    { *m = ConnectionSettings{} }
func (m *ConnectionSettings) String() string            { return proto.CompactTextString(m) }
func (*ConnectionSettings) ProtoMessage()               {}
func (*ConnectionSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConnectionSettings) GetTick() string {
	if m != nil {
		return m.Tick
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "Ping")
	proto.RegisterType((*MarshalledJSON)(nil), "MarshalledJSON")
	proto.RegisterType((*Lights)(nil), "Lights")
	proto.RegisterType((*Light)(nil), "Light")
	proto.RegisterType((*RGB)(nil), "RGB")
	proto.RegisterType((*ConnectionSettings)(nil), "ConnectionSettings")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	GetPing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error)
	StreamCueMaster(ctx context.Context, in *ConnectionSettings, opts ...grpc.CallOption) (API_StreamCueMasterClient, error)
	StreamGetLights(ctx context.Context, in *ConnectionSettings, opts ...grpc.CallOption) (API_StreamGetLightsClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetPing(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Ping, error) {
	out := new(Ping)
	err := grpc.Invoke(ctx, "/API/GetPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StreamCueMaster(ctx context.Context, in *ConnectionSettings, opts ...grpc.CallOption) (API_StreamCueMasterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/API/StreamCueMaster", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamCueMasterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamCueMasterClient interface {
	Recv() (*MarshalledJSON, error)
	grpc.ClientStream
}

type aPIStreamCueMasterClient struct {
	grpc.ClientStream
}

func (x *aPIStreamCueMasterClient) Recv() (*MarshalledJSON, error) {
	m := new(MarshalledJSON)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) StreamGetLights(ctx context.Context, in *ConnectionSettings, opts ...grpc.CallOption) (API_StreamGetLightsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/API/StreamGetLights", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamGetLightsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamGetLightsClient interface {
	Recv() (*Lights, error)
	grpc.ClientStream
}

type aPIStreamGetLightsClient struct {
	grpc.ClientStream
}

func (x *aPIStreamGetLightsClient) Recv() (*Lights, error) {
	m := new(Lights)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for API service

type APIServer interface {
	GetPing(context.Context, *Ping) (*Ping, error)
	StreamCueMaster(*ConnectionSettings, API_StreamCueMasterServer) error
	StreamGetLights(*ConnectionSettings, API_StreamGetLightsServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/GetPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPing(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StreamCueMaster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamCueMaster(m, &aPIStreamCueMasterServer{stream})
}

type API_StreamCueMasterServer interface {
	Send(*MarshalledJSON) error
	grpc.ServerStream
}

type aPIStreamCueMasterServer struct {
	grpc.ServerStream
}

func (x *aPIStreamCueMasterServer) Send(m *MarshalledJSON) error {
	return x.ServerStream.SendMsg(m)
}

func _API_StreamGetLights_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionSettings)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamGetLights(m, &aPIStreamGetLightsServer{stream})
}

type API_StreamGetLightsServer interface {
	Send(*Lights) error
	grpc.ServerStream
}

type aPIStreamGetLightsServer struct {
	grpc.ServerStream
}

func (x *aPIStreamGetLightsServer) Send(m *Lights) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPing",
			Handler:    _API_GetPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCueMaster",
			Handler:       _API_StreamCueMaster_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamGetLights",
			Handler:       _API_StreamGetLights_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}

func init() { proto.RegisterFile("proto/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x31, 0x6f, 0xc2, 0x30,
	0x10, 0x85, 0x71, 0x43, 0x82, 0x38, 0x50, 0x91, 0xdc, 0x25, 0x65, 0xa8, 0x22, 0x4f, 0x9e, 0x42,
	0x05, 0x4b, 0xa5, 0x4e, 0x0d, 0x43, 0xd4, 0xaa, 0xb4, 0xc8, 0x4c, 0x1d, 0xdd, 0x60, 0x05, 0x8b,
	0xe0, 0x20, 0xdb, 0x0c, 0xfd, 0x1b, 0xfd, 0xc5, 0x95, 0x0f, 0xa8, 0x84, 0xda, 0xe9, 0xde, 0xbd,
	0xf3, 0x7d, 0x3a, 0x3d, 0xc3, 0x68, 0x6f, 0x5b, 0xdf, 0x4e, 0xe4, 0x5e, 0xe7, 0xa8, 0x58, 0x06,
	0xdd, 0xa5, 0x36, 0x35, 0x4d, 0xa1, 0xb7, 0x53, 0xce, 0xc9, 0x5a, 0xa5, 0x24, 0x23, 0xbc, 0x2f,
	0xce, 0x2d, 0x7b, 0x80, 0xeb, 0x85, 0xb4, 0x6e, 0x23, 0x9b, 0x46, 0xad, 0x5f, 0x56, 0xef, 0x6f,
	0x94, 0x42, 0x77, 0xab, 0xcd, 0xfa, 0xf4, 0x10, 0x75, 0xf0, 0xd6, 0xd2, 0xcb, 0xf4, 0x2a, 0x23,
	0x7c, 0x28, 0x50, 0x33, 0x0e, 0xc9, 0xab, 0xae, 0x37, 0xde, 0xd1, 0x3b, 0x48, 0x1a, 0x54, 0x29,
	0xc9, 0x22, 0x3e, 0x98, 0x26, 0x39, 0x0e, 0xc4, 0xc9, 0x65, 0x1f, 0x10, 0xa3, 0x11, 0x30, 0xfe,
	0x6b, 0x7f, 0xbe, 0x01, 0x75, 0xf0, 0x8c, 0xdc, 0x29, 0x44, 0xf7, 0x05, 0x6a, 0xca, 0x61, 0x58,
	0x1d, 0xac, 0x55, 0xc6, 0xcf, 0xdb, 0xa6, 0xb5, 0x69, 0x94, 0x11, 0x3e, 0x98, 0x76, 0x73, 0x51,
	0x16, 0xe2, 0x62, 0xc2, 0x26, 0x10, 0x89, 0xb2, 0xa0, 0x43, 0x20, 0x02, 0xa9, 0xb1, 0x20, 0x22,
	0x74, 0x25, 0xf2, 0x62, 0x41, 0xca, 0xd0, 0x15, 0x48, 0x88, 0x05, 0x29, 0x18, 0x07, 0x3a, 0x6f,
	0x8d, 0x51, 0x95, 0xd7, 0xad, 0x59, 0x29, 0xef, 0xb5, 0xa9, 0x1d, 0x1e, 0xa6, 0xab, 0xed, 0xef,
	0x61, 0xba, 0xda, 0x4e, 0xbf, 0x09, 0x44, 0x4f, 0xcb, 0x67, 0x7a, 0x0b, 0xbd, 0x52, 0x79, 0x8c,
	0x31, 0xce, 0x43, 0x19, 0x1f, 0x0b, 0xeb, 0xd0, 0x47, 0x18, 0xad, 0xbc, 0x55, 0x72, 0x37, 0x3f,
	0xa8, 0x85, 0x74, 0x5e, 0x59, 0x7a, 0x93, 0xff, 0xc5, 0x8f, 0x47, 0xf9, 0x65, 0xc6, 0xac, 0x73,
	0x4f, 0xe8, 0xec, 0xbc, 0x5c, 0x2a, 0x7f, 0x0a, 0xf2, 0xdf, 0xe5, 0xde, 0x31, 0x4d, 0x17, 0x96,
	0x3e, 0x13, 0xfc, 0xd7, 0xd9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x7f, 0xd5, 0x46, 0xea,
	0x01, 0x00, 0x00,
}
